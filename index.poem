export_memory "memory"
export_table "table"
import "env" "pushFromMemory" _push_from_memory 2
import "env" "popToMemory"    _pop_to_memory 1
import "env" "log"            _log 0
import "env" "logNumber"      logNumber 1
import "env" "getInput"       _get_input 0 1
import "env" "sendOutput"     _send_output 0
import "env" "sendError"      _send_error 0
import "env" "read"           _read 1 1
import "env" "list"           _list 1 1
import "env" "write"          _write 1 1
import "env" "finish"         _finish 0

include "./compiler.poem" poetry\

export "init" init
  get_input
  poetry\read = #read
  poetry\list = #list
  poetry\compile (get_input) #finish
  if poetry\error
    send_error poetry\error

func finish output
  _push_from_memory (address_of output) (size_of output)
  _finish

func log msg
  _push_from_memory (address_of msg) (size_of msg)
  _log

func get_input
  var input = binary_string _get_input
  _pop_to_memory (address_of input)
  return "" + input

func send_output data
  _push_from_memory (address_of data) (size_of data)
  _send_output

func send_error data
  _push_from_memory (address_of data) (size_of data)
  _send_error


var _callbacks = object

func read path callback
  _push_from_memory (address_of path) (size_of path)
  var req_id = _read #_read_cb
  _callbacks[""+req_id] = callback
  return req_id

func write path data callback
  _push_from_memory (address_of path) (size_of path)
  _push_from_memory (address_of data) (size_of data)
  return _write callback

func list path callback
  _push_from_memory (address_of path) (size_of path)
  var req_id = _list #_read_cb
  _callbacks[""+req_id] = callback
  return req_id

func _read_cb success length req_id
  var callback = _callbacks[""+req_id]
  _callbacks[""+req_id] = null
  if success
    var data = binary_string length
    _pop_to_memory (address_of data)
  #callback success data req_id
